class Solution(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        res=[]
        self.dfs(num,"",0,target,res,[])
        ret=[]
        # a = ["fkfdjk", "tks", "hell0"]
        for i in res:
            if i[0]=='+':
                ret.append(i[1:])
        print ret
        return ret

        # for

    def dfs(self,left,curstr,curval,target,res,lastop):
        # print left,curstr,curval,res
        if len(left)==0 and curval==target:
            res.append(curstr[:])
            return
        if len(left)>0:
            for i in range(0,len(left)):
                newleft=left[i+1:]
                usedstr=left[:i+1]
                if usedstr[0]=='0' and len(usedstr)>1:
                    return
                newcurval1=curval+int(usedstr)
                newcurstr1=curstr+"+"+usedstr
                lastop1=['+',int(usedstr)]
                self.dfs(newleft,newcurstr1,newcurval1,target,res,lastop1)
                newcurval2=curval-int(usedstr)
                newcurstr2=curstr+"-"+usedstr
                lastop2 = ['-',int(usedstr)]
                self.dfs(newleft,newcurstr2,newcurval2,target,res,lastop2)
                if len(lastop)==0:
                    continue
                newcurstr3 = curstr + "*" + usedstr
                if lastop[0]=='+':
                    self.dfs(newleft, newcurstr3, curval-lastop[1]+lastop[1]*int(usedstr), target, res,['+',lastop[1]*int(usedstr)])
                elif lastop[0] == '-':
                    self.dfs(newleft, newcurstr3, curval + lastop[1]-(lastop[1] * int(usedstr)), target, res,['-',lastop[1]*int(usedstr)])



        return
a=Solution()
# num = "123"
# target = 6
# a.addOperators(num,target)
#
# num = "232"
# target = 8
# a.addOperators(num,target)

num = "123456789"
target = 45
a.addOperators(num,target)


num = "12345"
target =
a.addOperators(num,target)

m=['1+2+3+4+5+6+7+8+9',
 '1+2+3+4+5-6*7+8*9',
 '1+2+3+4-5*6+7*8+9',
 '1+2+3+4-5*6-7+8*9',
 '1+2+3-4*5+6*7+8+9',
 '1+2+3-4*5-6+7*8+9',
 '1+2+3-4*5-6-7+8*9',
 '1+2+3*4+5+6*7-8-9',
 '1+2+3*4*5+6*7-8*9',
 '1+2+3*4*5-6-7-8-9',
 '1+2+3-45+67+8+9', '1+2+3*45-6-78-9', '1+2-3+4*5+6*7-8-9', '1+2-3-4-5*6+7+8*9', '1+2-3*4+5*6+7+8+9', '1+2-3*4-5+6*7+8+9', '1+2-3*4-5-6+7*8+9',
 '1+2-3*4-5-6-7+8*9', '1+2-3*4*5-6+7*8*9', '1+2-3*4*5-6+7+89', '1+2-3+45+6-7-8+9', '1+2-3+45-6+7+8-9', '1+2-3-45-6+7*8*9', '1+2-3-45-6+7+89',
 '1+2*3+4*5-6+7+8+9', '1+2*3-4-5-6*7+89', '1+2*3*4+5+6+7+8-9', '1+2*3*4-5*6+7*8-9', '1+2*3*4-5-67+89', '1+2-34+5+6+7*8+9', '1+2-34+5+6-7+8*9',
 '1+2-34-5-6+78+9', '1+2*34-5*6+7+8-9', '1-2+3+4-5*6+78-9', '1-2+3+4*5*6-78-9', '1-2+3-4*5-6+78-9', '1-2+3*4*5+6-7*8*9', '1-2+3+45+6-7+8-9',

 '1-2+3-45+6-7+89', '1-2-3+4-5+67-8-9', '1-2-3*4+5+6+7*8-9', '1-2-3*4-5-6+78-9', '1-2-3+45-6-7+8+9', '1-2*3+4+5+6*7+8-9', '1-2*3+4+5-6+7*8-9',
 '1-2*3+4*5+6+7+8+9', '1-2*3+4*5-6*7+8*9', '1-2*3+4+56+7-8-9', '1-2*3-4+5*6+7+8+9', '1-2*3-4-5+6*7+8+9', '1-2*3-4-5-6+7*8+9', '1-2*3-4-5-6-7+8*9',
 '1-2*3+45-67+8*9', '1-2-34+5+6+78-9', '1-2-34-5+6+7+8*9', '1-2-34+56+7+8+9', '1-2*34+5*6-7+89', '1*2+3+4+5*6+7+8-9', '1*2+3+4-5+6*7+8-9',
 '1*2+3+4-5-6+7*8-9',
 '1*2+3*4*5-6*7+8+9', '1*2+3*4-56+78+9', '1*2+3+45+67-8*9', '1*2+3-45+6+7+8*9', '1*2-3+4-5-6*7+89',
 '1*2-3+4*5*6-78+9', '1*2-3-4*5+67+8-9', '1*2-3-4+56-7-8+9',
 '1*2-3*4+5+67-8-9', '1*2*3+4+5+6+7+8+9', '1*2*3+4+5-6*7+8*9', '1*2*3+4-5*6+7*8+9',
 '1*2*3+4-5*6-7+8*9', '1*2*3-4*5+6*7+8+9', '1*2*3-4*5-6+7*8+9',
 '1*2*3-4*5-6-7+8*9', '1*2*3*4+5+6-7+8+9', '1*2*3*4*5-6-78+9', '1*2*3-45+67+8+9',
 '1*2+34+5-6-7+8+9', '1*2+34-5+6+7-8+9', '1*2+34+56-7*8+9',
 '1*2+34-56+7*8+9', '1*2+34-56-7+8*9', '1*2-34+5*6+7*8-9', '1*2*34-5+6-7-8-9',
 '1*2*34+56-7-8*9', '1+23+4+5+6+7+8-9', '1+23+4-5*6+7*8-9',
 '1+23+4-5-67+89', '1+23-4-5+6+7+8+9', '1+23-4-5-6*7+8*9', '1+23-4*5+6*7+8-9',
 '1+23-4*5-6+7*8-9', '1+23*4+5-6-7*8+9', '1+23*4-5-6*7+8-9',
 '1+23*4-56+7-8+9', '1+23-45+67+8-9', '1-23+4-5+67-8+9', '1-23+4*5-6*7+89',
 '1-23-4+5*6*7+8+9', '1-23-4+5+67+8-9', '1-23-4-5-6-7+89',
 '1-23*4+5+6*7+89', '1-23+45-67+89', '1*23+4*5-6+7-8+9', '1*23-4-56-7+89',
 '12+3+4-56-7+89', '12+3-4*5+67-8-9', '12+3*4+5+6-7+8+9',
 '12+3*4*5-6-78+9', '12+3-45+6+78-9', '12+3*45-6-7-89', '12-3+4*5+6-7+8+9',
 '12-3+4+56-7-8-9', '12-3-4+5*6-7+8+9', '12-3-4+56-7*8*9',
 '12-3-4-56+7*8*9', '12-3-4-56+7+89', '12-3*4-5+67-8-9', '12-3-45-6+78+9',
 '12*3+4+5+6-7-8+9', '12*3+4+5-6+7+8-9', '12*3-4-5-6+7+8+9',
 '12*3-4-56+78-9', '12*3*4-5*6-78+9', '12+34-5-6-7+8+9']


def test(a):
    a=["fkfdjk","tks","hell0"]
    for i in a:
        i=i[1:]
    print a
test(1)




n=["1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4+5+6+7+8+9","1*2*3+4+5-6*7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4-5*6-7+8*9","1*2*3-4*5+6*7+8+9","1*2*3-4*5-6+7*8+9","1*2*3-4*5-6-7+8*9","1*2*3-45+67+8+9","1*2*34+56-7-8*9","1*2*34-5+6-7-8-9","1*2+3*4-56+78+9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1*2+3+4-5-6+7*8-9","1*2+3+45+67-8*9","1*2+3-45+6+7+8*9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*2+34-5+6+7-8+9","1*2+34-56+7*8+9","1*2+34-56-7+8*9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-34+5*6+7*8-9","1*23+4*5-6+7-8+9","1*23-4-56-7+89","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2*3+4*5*6+7-89","1+2*3+4*5-6+7+8+9","1+2*3-4-5-6*7+89","1+2*34-5*6+7+8-9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3*45-6-78-9","1+2+3+4+5+6+7+8+9","1+2+3+4+5-6*7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4-5*6-7+8*9","1+2+3-4*5+6*7+8+9","1+2+3-4*5-6+7*8+9","1+2+3-4*5-6-7+8*9","1+2+3-45+67+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3*4-5+6*7+8+9"]

m1=set(m)
n1=set(n)
print n1-m1