class Solution(object):
    def verifyPreorder(self, preorder):
        """
        :type preorder: List[int]
        :rtype: bool
        """

        """
        
        二叉树的前序遍历首先访问根节点然后遍历左子树，最后遍历右子树，对于左子树和右子树的遍历分别也是前序遍历。
        从根节点开始，访问当前节点之后，如果当前节点有左子节点，则下一步访问左子节点，直到被访问的节点没有左子节点为止，
        然后访问右子节点。根据二叉搜索树的特点，左子节点的值小于父节点的值，右子节点的值大于父节点的值，
        因此，如果访问到的节点值小于上一个节点值，则说明当前节点是上一个节点的左子节点，
        如果访问到的节点值大于上一个节点值，则说明当前节点是某个节点的右子节点。
        
        基于上述发现，可以维护一个单调栈，从栈底到栈顶的元素单调递减，另外维护一个当前的最小值，初始化为负无穷。
        对给定的先序遍历序列，依次遍历其中的每个值。如果栈为空，或者当前值小于栈顶的值，则将当前值压入栈内。
        如果当前值大于栈顶的值，说明当前值是某个节点的右子节点的值，因此将栈内小于当前值的元素全部弹出，然后将当前值压入栈内。
        
        最后弹出的元素是当前值所在节点的父节点的元素，即当前值所在节点是该父节点的右子节点，因此将最小值设为最后弹出的元素。
        根据二叉搜索树的特点，在父节点的右子树中的任何节点的值都必须大于父节点的值，即此时的最小值，
        如果在先序遍历序列中发现一个值小于或等于最小值，则该先序遍历序列不是二叉搜索树的正确先序遍历序列。
        """

        st=[]
        minv=-float("inf")
        for v in preorder:
            if v<minv:
                return False
            else:
                while len(st)>0 and st[-1]>v:
                    minv=st.pop()
                st.append(v)
        return True

